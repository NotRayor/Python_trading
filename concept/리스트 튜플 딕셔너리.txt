리스트, 튜플, 딕셔너리는 매우 기초적이므로 넘긴다.

판다스에서는 2가지의 자료구조가 있다.

1. Series
Series는 1차원 배열과 같은 자료구조,
kakao = Series([92600, 92400, 92100, 92300])
print(kakao)

이런 식으로 사용,
배열처럼 값 참조도 가능하다.
Series 객체는, 각 값에 연결된 인덱스 값도 동시에 저장한다.

Series([92600, 92400, 94300, 92300], index = ['2019-05-12',
                                                       '2019-05-13',
                                                       '2019-05-14',
                                                       '2019-05-15'])
이렇게 인덱스 값을 직접 설정해줄수도 있다.
인덱스 값은 for data in kakao.index: 이렇게 작성하여
각 값으로 시리즈 요소들을 참조하는데 쓰일 수도 있다.

시리즈끼리 더 했을 때, 순서와 상관없이 같은 인덱스 값끼리 덧셈 연산을 수행한다.



2. DataFrame
이번엔 다르다! 2차원 배열의 자료구조,

1. 딕셔너리를 이용해 만든다. DataFrame(딕셔너리) 

raw_data = {'col0' : [1,2,3,4],
            'col1' : [10,20,30,40],
            'col2' : [100, 200, 300, 400]}

data = DataFrame(raw_data)

raw 행 0123
col 열 1234, 10203040, 100200300400

col1, col2 ... 이름을 쳐서 각 열.. colum의 요소와 타입을 확인할 수 있다.


2. 각 열이 Series로 구성된 것이라고도 볼 수 있겠다.


daeshin_day = DataFrame(daeshin, columns = ['open', 'high', 'close', 'low'])
colums 표현하고 싶은 컬럼만 지정, 순서에 맞춰서 출력되니, 순서조정도 가능하다.

daeshin = {'open':  [11650, 11100, 11200, 11100, 11000],
           'high':  [12100, 11800, 11200, 11100, 11150],
           'low' :  [11600, 11050, 10900, 10950, 10900],
           'close': [11900, 11600, 11000, 11100, 11050]}
data = ['18.02.20','18.02.21','18.02.22','18.02.23','18.02.24']
daeshin_day = DataFrame(daeshin, index = data)
print(daeshin_day)

이렇게, index 값도 미리 배열로 만들어줘서 넣어줄수도 있다.


close = daeshin_day['close']
print(close)

이렇게 해서, 데이터프레임에 하나의 열만 뽑아 Series로 출력할 수도 있다.

근데 문제는 행이다. 행은 열과 똑같은 방법으로 인자값으로 넣어도 출력되지 않는다.
행을 불러오려면
day_date = daeshin_day[0:3]
print(day_date)

이런식으로 쓰거나, 
day_date = daeshin_day['18.02.20': '18.02.24']
print(day_date)
이렇게, 행의 이름을 통해 슬라이싱하면 된다.





















